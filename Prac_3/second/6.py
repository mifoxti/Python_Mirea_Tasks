import numpy as np
import matplotlib.pyplot as plt
from matplotlib.collections import LineCollection
from matplotlib.patches import Circle

def generate_attraction_points(num_points, xlim, ylim):
    attraction_points = np.random.rand(num_points, 2)
    attraction_points[:, 0] = attraction_points[:, 0] * (xlim[1] - xlim[0]) + xlim[0]
    attraction_points[:, 1] = attraction_points[:, 1] * (ylim[1] - ylim[0]) + ylim[0]
    return attraction_points

def generate_tree(attraction_points, xlim, ylim):
    root = [(np.mean(xlim), ylim[0])]
    trunk = [(np.mean(xlim), ylim[0] - 400)]
    tree_nodes = root + trunk
    edges = [(trunk[0], root[0])]

    for point in sorted(attraction_points, key=lambda x: x[1]):
        potential_parents = [node for node in tree_nodes if node[1] < point[1]]
        if not potential_parents:
            continue
        distances = [np.linalg.norm(np.array(node) - np.array(point)) for node in potential_parents]
        parent = potential_parents[np.argmin(distances)]
        if len([edge for edge in edges if edge[0] == parent]) < 5:
            tree_nodes.append(tuple(point))
            edges.append((parent, tuple(point)))

    return tree_nodes, edges

def draw_tree(tree_nodes, edges):
    segments = [(edge[0], edge[1]) for edge in edges]

    fig, ax = plt.subplots(figsize=(10, 10))
    lc = LineCollection(segments, colors='blue', linewidths=2)
    ax.add_collection(lc)
    ax.autoscale()
    ax.scatter(*zip(*tree_nodes), color='blue', marker='o', s=50)
    ax.set_aspect('equal')

    # Add leaves
    leaf_points = np.random.choice(range(len(tree_nodes)), 80)
    for leaf_idx in leaf_points:
        leaf = Circle(tree_nodes[leaf_idx], 40, color='green')
        ax.add_patch(leaf)

    plt.title('Tree generated by the space colonization algorithm')
    plt.xlabel('X')
    plt.ylabel('Y')
    plt.grid(True)
    plt.show()

num_points = 100
xlim = (0, 1000)
ylim = (0, 1000)

attraction_points = generate_attraction_points(num_points, xlim, ylim)
tree_nodes, edges = generate_tree(attraction_points, xlim, ylim)
draw_tree(tree_nodes, edges)
